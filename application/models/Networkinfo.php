<?php

/*
 * Copyright (C) 2009-2011 Internet Neutral Exchange Association Limited.
 * All Rights Reserved.
 * 
 * This file is part of IXP Manager.
 * 
 * IXP Manager is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, version v2.0 of the License.
 * 
 * IXP Manager is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 * 
 * You should have received a copy of the GNU General Public License v2.0
 * along with IXP Manager.  If not, see:
 * 
 * http://www.gnu.org/licenses/gpl-2.0.html
 */


/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
/**
 *
 * Auto-generated Doctrine ORM File
 *
 * @category ORM
 * @package IXP_ORM_Models
 * @copyright Copyright 2008 - 2010 Internet Neutral Exchange Association Limited <info (at) inex.ie>
 * @author Barry O'Donovan <barryo (at) inex.ie>
 */
class Networkinfo extends BaseNetworkinfo
{

    const PROTOCOL_IPV4 = 4;
    const PROTOCOL_IPV6 = 6;

    public static $PROTOCOL_TEXT = array(
        Networkinfo::PROTOCOL_IPV4 => 'IPv4',
        Networkinfo::PROTOCOL_IPV6 => 'IPv6',
    );

    public function setUp()
    {
        parent::setUp();

        $this->hasOne( 'Vlan',          array( 'local' => 'vlanid', 'foreign' => 'id') );
    }

    /**
     * Returns an array of the network information indexed by Vlan.id
     *
     * For example (where x us the vlan ID):
     *
     *   [x] => array(2) {
     *     [4] => array(9) {
     *       ["id"] => string(1) "1"
     *       ["vlanid"] => string(1) "2"
     *       ["protocol"] => string(1) "4"
     *       ["network"] => string(13) "193.242.111.0"
     *       ["masklen"] => string(2) "25"
     *       ["rs1address"] => string(13) "193.242.111.8"
     *       ["rs2address"] => string(13) "193.242.111.9"
     *       ["dnsfile"] => string(44) "/opt/bind/zones/reverse-vlan-10-ipv4.include"
     *       ["Vlan"] => array(5) {
     *         ["id"] => string(1) "2"
     *         ["name"] => string(15) "Peering VLAN #1"
     *         ["number"] => string(2) "10"
     *         ["rcvrfname"] => string(0) ""
     *         ["notes"] => string(0) ""
     *       }
     *     }
     *     [6] => array(9) {
     *       ["id"] => string(1) "2"
     *       ["vlanid"] => string(1) "2"
     *       ["protocol"] => string(1) "6"
     *       ["network"] => string(16) "2001:07F8:0018::"
     *       ["masklen"] => string(2) "64"
     *       ["rs1address"] => string(14) "2001:7f8:18::8"
     *       ["rs2address"] => string(14) "2001:7f8:18::9"
     *       ["dnsfile"] => string(44) "/opt/bind/zones/reverse-vlan-10-ipv6.include"
     *       ["Vlan"] => array(5) {
     *         ["id"] => string(1) "2"
     *         ["name"] => string(15) "Peering VLAN #1"
     *         ["number"] => string(2) "10"
     *         ["rcvrfname"] => string(0) ""
     *         ["notes"] => string(0) ""
     *       }
     *     }
     *   }
     *
     */
    public static function toStructuredArray()
    {
        $networkInfo = Doctrine_Query::create()
        ->from( 'Networkinfo n' )
        ->leftJoin( 'n.Vlan vi' )
        ->execute();

        $data = array();
        foreach( $networkInfo as $ni )
        {
            $data[$ni['vlanid']][$ni['protocol']] = $ni->toArray();
        }

        return $data;
    }
}
