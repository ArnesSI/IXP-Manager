<?php

/*
 * Copyright (C) 2009-2011 Internet Neutral Exchange Association Limited.
 * All Rights Reserved.
 * 
 * This file is part of IXP Manager.
 * 
 * IXP Manager is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, version v2.0 of the License.
 * 
 * IXP Manager is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 * 
 * You should have received a copy of the GNU General Public License v2.0
 * along with IXP Manager.  If not, see:
 * 
 * http://www.gnu.org/licenses/gpl-2.0.html
 */


/**
 * MyPeeringMatrixTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
/**
 *
 * Auto-generated Doctrine ORM File
 *
 * @category ORM
 * @package IXP_ORM_Models
 * @copyright Copyright 2008 - 2010 Internet Neutral Exchange Association Limited <info (at) inex.ie>
 * @author Barry O'Donovan <barryo (at) inex.ie>
 */
class MyPeeringMatrixTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object MyPeeringMatrixTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('MyPeeringMatrix');
    }


    /**
     * Calculate the totals for the various states on a per member basis
     *
     * Returns an array of the type:
     *
     * Array
     * (
     *     [YES] => 5
     *     [NO] => 32
     *     [WAITING] => 3
     *     [NEVER] => 5
     * )
     *
     * @param int The customer ID to find the statistics for
     * @return array The array as above.
     */
    public static function getStatesTotal( $custid, $vlan = null )
    {
        if( !ctype_digit( $custid ) )
            return array();

        $q = Doctrine_Query::create()
            ->from( 'MyPeeringMatrix mpm' )
            ->select( 'mpm.peered' )
            ->addSelect( 'COUNT( mpm.peered ) as count' )
            ->where( 'mpm.custid = ?', $custid )
            ->andWhere( 'mpm.dead = 0' );

        if( $vlan !== null )
            $q->andWhere( 'mpm.vlan = ?', $vlan );

        $result = $q->groupBy( 'mpm.peered' )
               ->execute( null, Doctrine_Core::HYDRATE_ARRAY );

        $totals = array();
        foreach( $result as $r )
            $totals[$r['peered']] = $r['count'];

        return $totals;
    }

    /**
     * Generates or updates the users My Peering Matrix table
     *
     * Uses the public peering matrix tables as its source
     *
     * @param int $custid The customer ID to generate / update for
     */
    public function generateOrUpdateMyPeeringMatrix( $custid = false, $vlantag )
    {
        if( !$custid )
            throw new INEX_Exception( 'You must provide a customer id!' );
            
        if( !( $vlan = Doctrine_Core::getTable( 'Vlan' )->findOneByNumber( $vlantag ) ) )
            throw new INEX_Exception( 'Invalid VLAN tag!' );
            
        // let's create / update the users own peering matrix
        // we'll use the potential peers as given the the peering matrix table

        $custs_ints = Doctrine_Query::create()
            ->from( 'Vlaninterface vint' )
            ->leftJoin( 'vint.Virtualinterface vi')
            ->leftJoin( 'vi.Cust c' )
            ->whereIn( 'c.type', array( Cust::TYPE_PROBONO, Cust::TYPE_FULL ) )
            ->andWhere( 'c.status = ?', Cust::STATUS_NORMAL )
            ->andWhere( '( c.dateleave IS NULL OR c.dateleave = ? )', '0000-00-00' )
            ->andWhere( 'vint.vlanid = ?', $vlan['id'] )
            ->execute( null, Doctrine_Core::HYDRATE_RECORD );
            
        $mypeers = Doctrine_Query::create()
            ->from( 'MyPeeringMatrix mpm' )
            ->where( 'mpm.custid = ?', $custid )
            ->andWhere( 'mpm.vlan = ?', $vlan['number'] )
            ->execute( null, Doctrine_Core::HYDRATE_RECORD );

        $custs_ints_by_custids = array();

        foreach( $custs_ints as $ci )
            $custs_ints_by_custids[$ci->Virtualinterface->Cust['id']] = $ci;
            
        $custs_ints_custids = array_keys( $custs_ints_by_custids );
            
        $mypeers_by_custids = array();

        foreach( $mypeers as $mp )
            $mypeers_by_custids[$mp['peerid']] = $mp;
        
        $mypeers_custids = array_keys( $mypeers_by_custids );

        // find new
        foreach( $custs_ints_by_custids as $vint_cust_id => $vint )
        {
            // skip myself:
            if( $vint_cust_id == $custid )
                continue;
                
            if( !in_array( $vint_cust_id, $mypeers_custids ) )
            {
                // found a missing / new peer
                $mp = new MyPeeringMatrix();
                $mp['custid'] = $custid;
                $mp['peerid'] = $vint_cust_id;
                $mp['vlan']   = $vlan['number'];
                $mp['peered'] = MyPeeringMatrix::PEERED_STATE_UNKNOWN;
                $mp['ipv6']   = 0;
                $mp->save();
            }
            else if( $mypeers_by_custids[$vint_cust_id]['dead'] == 1 )
            {
                // looks like a customer ressurected from the dead
                $mypeers_by_custids[$vint_cust_id]['dead'] = 0;
                $mypeers_by_custids[$vint_cust_id]->save();
            }
        }

        // remove old
        foreach( $mypeers as $mp )
        {
            if( !in_array( $mp['peerid'], $custs_ints_custids ) )
            {
                $mp['dead'] = 1;
                $mp->save();
            }
        }
    }

}